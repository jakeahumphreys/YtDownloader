@page "/"
@using YtDownloader.Services
@using System.IO
@using JCommon.ErrorHandling
@using YtDownloader.Common
@using YtDownloader.Types

@if (Errors.Count > 0)
{
    foreach (var error in Errors)
    {
        <MudAlert Severity="Severity.Error">@error.Message</MudAlert>
    }
}

@if (DownloadsEnabled)
{
    <MudContainer>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="VideoUrl" Label="Youtube URL" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Link" AdornmentColor="Color.Info" />
            </MudItem>
            <MudItem>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary" OnClick="() => DownloadVideoFromUrl()">
                    Download Now
                </MudButton>
            </MudItem>
            @if (DownloadHistoryItems.Count > 0)
            {
                <MudItem xs="12">
                    <MudContainer>
                        @foreach (var historyItem in DownloadHistoryItems)
                        {
                            <MudCard Outlined="true" Class="p-2">
                                <MudCardHeader>
                                    @if (historyItem.Success)
                                    {
                                        <MudChip Color="Color.Success">Success</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="Color.Error">Failed</MudChip>
                                    }
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText>@historyItem.Id</MudText>
                                    <MudText Typo="Typo.body2">@historyItem.Url</MudText>
                                    <MudText Typo="Typo.body2">@historyItem.Title</MudText>
                                    <MudText Typo="Typo.body2">@historyItem.Author</MudText>
                                    <MudText Typo="Typo.body2">@historyItem.Duration</MudText>
                                </MudCardContent>
                                 <MudCardMedia Image="@historyItem.ThumbnailUrl" Height="250" />
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary">Something</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    </MudContainer>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
}

@code
{
    [Inject] IDownloadService _downloadService { get; set; }
    
    public List<Error> Errors { get; set; }
    public List<DownloadHistory> DownloadHistoryItems { get; set; }
    public string VideoUrl { get; set; }
    public bool DownloadsEnabled { get; set; }

    protected override Task OnInitializedAsync()
    {
        Errors = new List<Error>();
        DownloadHistoryItems = new List<DownloadHistory>();
        DownloadsEnabled = true;

        if (!IsFfmPegPresent())
        {
            DownloadsEnabled = false;
            Errors.Add(new Error($"Ffmpeg.exe is not present at {FilePathHelper.FfmPegExe}, downloads are not possible at this time."));
            StateHasChanged();
        }

        
        return base.OnInitializedAsync();
    }

    public async void DownloadVideoFromUrl()
    {
        if (!string.IsNullOrWhiteSpace(VideoUrl))
        {
            var download = await _downloadService.SaveAudioToDisk(VideoUrl);
            DownloadHistoryItems.Add(download);
            StateHasChanged();
        }
    }

    private bool IsFfmPegPresent()
    {
        return File.Exists(FilePathHelper.FfmPegExe);
    }
}
