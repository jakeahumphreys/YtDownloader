@page "/"
@using YtDownloader.Services
@using System.IO
@using JCommon.ErrorHandling
@using YtDownloader.Common
@using YtDownloader.Types
@using System.Diagnostics

@if (Errors.Count > 0)
{
    foreach (var error in Errors)
    {
        <MudAlert Severity="Severity.Error">@error.Message</MudAlert>
    }
}

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4 mud-height-full" Outlined="true">
            <MudItem>
                <MudTextField @bind-Value="VideoUrl" Label="Youtube URL" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Link" AdornmentColor="Color.Info"/>
            </MudItem>
            <br/>
            <MudItem>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary" OnClick="async () => await CallDownload()">
                    Download Now
                </MudButton>
            </MudItem>
        </MudPaper>
    </MudItem>
    @if (DownloadsEnabled)
    {
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full" Outlined="true">
                <MudGrid>
                    @if (DownloadHistoryItems.Count > 0)
                    {
                        <MudItem xs="12">
                            <MudContainer>
                                @foreach (var historyItem in DownloadHistoryItems)
                                {
                                    <MudCard Outlined="true" Class="p-2">
                                        <MudCardHeader>
                                            <MudText Typo="Typo.body2">@historyItem.Title</MudText>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudText>@historyItem.Id</MudText>
                                            <MudText Typo="Typo.body2">@historyItem.Url</MudText>
                                            <MudText Typo="Typo.body2">@historyItem.Author</MudText>
                                            <MudText Typo="Typo.body2">@historyItem.Duration</MudText>
                                        </MudCardContent>
                                        <MudCardMedia Image="@historyItem.ThumbnailUrl" Height="250"/>
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => ShowFile(historyItem.LocationOnDisk))">Open File</MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                }
                            </MudContainer>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-4 mud-height-full" Outlined="true">
                <MudList Clickable="false" Dense="true" DisableGutters="true">
                    @foreach (var item in LogItems)
                    {
                        <MudListItem Text="@item.Message" Icon="@item.Icon" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    }

</MudGrid>

@code
{
    [Inject] IDownloadService _downloadService { get; set; }
    
    public List<Error> Errors { get; set; }
    public List<DownloadHistory> DownloadHistoryItems { get; set; }
    public List<LogItem> LogItems { get; set; }
    public string VideoUrl { get; set; }
    public bool DownloadsEnabled { get; set; }

    protected override Task OnInitializedAsync()
    {
        Errors = new List<Error>();
        DownloadHistoryItems = new List<DownloadHistory>();
        LogItems = new List<LogItem>();
        DownloadsEnabled = true;

        if (!IsFfmPegPresent())
        {
            DownloadsEnabled = false;
            Errors.Add(new Error($"Ffmpeg.exe is not present at {FilePathHelper.FfmPegExe}, downloads are not possible at this time."));
            StateHasChanged();
        }

        
        return base.OnInitializedAsync();
    }

    private void AddLog(string icon, string message)
    {
        LogItems.Add(new LogItem
        {
            OccurredAt = DateTime.Now,
            Icon = icon,
            Message = message
        });
        StateHasChanged();
    }

    private void ShowFile(string path)
    {
        Process.Start("explorer.exe", $"/select,{path}");
    }

    private async Task CallDownload()
    {
        AddLog(@Icons.Material.Filled.Info, $"Attempting to download {VideoUrl}");
        await DownloadVideoFromUrl();
    }

    private async Task DownloadVideoFromUrl()
    {
        if (!string.IsNullOrWhiteSpace(VideoUrl))
        {
            var downloadResult = await _downloadService.SaveAudioToDisk(VideoUrl);
            
            if (downloadResult.IsFailure)
            {
                AddLog(Icons.Material.Filled.Error, $"Download failed: {downloadResult.Errors.First()}");
                StateHasChanged();
                return;
            }
            
            AddLog(Icons.Material.Filled.Check, $"Downloaded {downloadResult.Content.Title} successfully!");
            DownloadHistoryItems.Add(downloadResult.Content);
            StateHasChanged();
        }
    }

    private bool IsFfmPegPresent()
    {
        return File.Exists(FilePathHelper.FfmPegExe);
    }
}
